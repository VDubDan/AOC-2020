using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;

namespace AOC_2020_Day10
{

    // Only used for Part 2
    public static class Paths
    {
        private static Dictionary<int, long> resolvedPaths = new Dictionary<int, long>();
        private static Dictionary<int, List<int>> nextNumbersDictionary = new Dictionary<int, List<int>>();
        private static int[] adapterRatings = new int[] {1, 2, 3};

        public static long FindNumberOfPaths(List<int> nodes)
        {
            nodes.Sort();

            GenerateNextNumbersDict(nodes);

            long result = FindPathsFrom(0, nodes);

            return result;

        }

        private static long FindPathsFrom(int startingPoint, List<int> nodes)
        {
            if (resolvedPaths.ContainsKey(startingPoint))
            {
                return resolvedPaths[startingPoint];
            }


            if (startingPoint == nodes.Max())
            {
                throw new Exception();
            }

            long numPaths = 0;

            foreach (int nextNode in nextNumbersDictionary[startingPoint])
            {
                if (nextNode == nodes.Max())
                {
                    numPaths++;
                }
                else
                {
                    long resultPaths = FindPathsFrom(nextNode, nodes);
                    numPaths += resultPaths;
                }
            }

            resolvedPaths.Add(startingPoint, numPaths);
            return numPaths;

        }


        private static void GenerateNextNumbersDict(List<int> listOfNodes)
        {
            // Calculate from 0 

            List<int> possibleNextAdaptersZero = new List<int>();

            foreach (int rating in adapterRatings)
            {
                int index = listOfNodes.IndexOf(0 + rating);

                // Search succesful
                if (index > -1)
                {
                    possibleNextAdaptersZero.Add(listOfNodes[index]);
                }

            }

            nextNumbersDictionary.Add(0, possibleNextAdaptersZero);



            // Calculate from the rest of the numbers

            foreach (int number in listOfNodes)
            {

                List<int> possibleNextAdapters = new List<int>();

                foreach (int rating in adapterRatings)
                {
                    int index = listOfNodes.IndexOf(number + rating);

                    // Search succesful
                    if (index > -1)
                    {
                        possibleNextAdapters.Add(listOfNodes[index]);
                    }

                }

                nextNumbersDictionary.Add(number, possibleNextAdapters);
            }

            
        }


    }
    class Program
    {

        static void Main()
        {
            int startJolts = 0;
            int[] adapterRatings = new int[] {1, 2, 3};

            string[] input = File.ReadAllLines("AOC-2020-Day10-Input.txt");

            // Convert input to list of int
            List<int> adapterList = new List<int>();

            foreach (string adapter in input)
            {
                adapterList.Add(Convert.ToInt32(adapter));
            }

            int currentJolts = startJolts;

            // Keep track of our ordering
           // List<int> orderedAdapters = new List<int>();

            int diffThree = 0;
            int diffOne = 0;

            while (adapterList.Count > 0)
            {

                foreach (int rating in adapterRatings)
                {
                    int index = adapterList.IndexOf(currentJolts + rating );

                    // Search succesful
                    if (index > -1)
                    {
                        if (rating == 1) diffOne++;
                        if (rating == 3) diffThree++;

                        Console.WriteLine(adapterList[index]);

                       // orderedAdapters.Add(adapterList[index]);
                        currentJolts = adapterList[index];
                        adapterList.RemoveAt(index);
                        break;
                    }

                }

            }

            // Account for the device
            diffThree++;
            int answer = diffOne * diffThree;

            Console.WriteLine(diffOne + " differences of 1");
            Console.WriteLine(diffThree + " differences of 3");

            Console.WriteLine("Part 1 Answer: " + answer);
            Console.WriteLine();



            // Part 2 Below Here

            List<int> partTwoAdapterList = new List<int>();

            // Create new adapter list
            foreach (string adapter in input)
            {
                partTwoAdapterList.Add(Convert.ToInt32(adapter));
            }


            Stopwatch stopwatch = new Stopwatch();
            
            stopwatch.Start();

            long result = Paths.FindNumberOfPaths(partTwoAdapterList);

            stopwatch.Stop();

            Console.WriteLine("Part Two Answer: " + result);

            Console.WriteLine("Part Two Calculated In :" + stopwatch.Elapsed.TotalSeconds.ToString(CultureInfo.InvariantCulture) + " seconds");

            Console.ReadLine();


        }


    }
}
